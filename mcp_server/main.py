# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T00:34:26+00:00



import argparse
import json
import os
from typing import *
from typing import Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity

from models import (
    FieldDatamodelCodeGeneratorRootSpecialGetResponse,
    HTTPValidationError,
    SerpData,
    V1CrawlQueryGetResponse,
    V1ImagesQueryGetResponse,
    V1NewsQueryGetResponse,
    V1SearchQueryGetResponse,
    V1SerpPostResponse,
)

app = MCPProxy(
    contact={
        'email': 'support@goog.io',
        'name': 'API Support',
        'url': 'https://goog.io',
    },
    description='# Intoduction\n\nThis is the OpenAPI V3 documentation for https://api.goog.io\n\nAn API to perform Google Searches. Extremely fast and accurate. Zero proxies. Clean USA IPs.\n\nSimple to use API, but advance enough to support special parameters such as languages, country and geographic locality.\n\nGoogio is the ultimate search API for Google Searches, Google News, and Google SERP.\n# Docs\n\n> An Unofficial Google Search API\n\nAn API to perform Google Searches. Extremely fast and accurate. Zero proxies. Clean USA IPs.\n\nSimple to use API, but advance enough to support special parameters such as languages, country and geographic locality.\n\n# Example Code\n\n Check out [Github repo](https://github.com/googio/googio_examples) for example code for calling the API with various languages.\n\n# Authentication\n\n### API Key\n\nOptional API key for authenticated access. Note that we use "API key" interchangably in these docs.\n\nAuthenticated requests must include an `apikey` header containing your subscription\'s API Key.\n\n| Security Schema Type | Header Name | Example Token |\n| --- | --- | --- |\n| API Key | `apikey` | c5bfb018-ab46-4e61-9271-4ec7e9c04a6e |\n\nIn the following example, `YOU_APIKEY` represents the auth token for your account.\n\n```\ncurl --header \'apikey: YOU_APIKEY\'\n```\n\nYou can view and manage your API keys in the [Dashboard](/dashboard).\n\nBe sure to keep your API keys secure. Do not share them in publicly accessible areas such as GitHub, client-side code, and so forth.\n\nAlso note that all API requests must be made over **HTTPS**. Calls made over plain HTTP will attempt to be automatically upgraded to HTTPS, though this use cases is discouraged.\n\n\n## Rate Limits\n\nAPI requests may be rate limited depending on your subscription plan and traffic patterns. The following response headers will be present in these cases:\n\n| Header | Description |\n| ------ | ----------- |\n| `X-RateLimit-Limit` | The maximum number of requests that the consumer is permitted to make. |\n| `X-RateLimit-Remaining` | The number of requests remaining in the current rate limit window. |\n| `X-RateLimit-Reset` | The time at which the current rate limit window resets in UTC epoch seconds. |\n\nWhen the rate limit is **exceeded**, an error is returned with the status "**429 Too Many Requests**":\n\n```json\n{\n  "error": {\n    "code": "too_many_requests",\n    "message": "Rate limit exceeded"\n  }\n}\n```\n\n\n\n## Errors\n\nThis API uses conventional HTTP response codes to indicate the success or failure of API requests. In general: Codes in the `2xx` range indicate success. Codes in the `4xx` range indicate an error that failed given the information provided (e.g., a required parameter was omitted, endpoint not found, etc.). Codes in the `5xx` range indicate an error with our API (these are rare).\n\n\n',
    title='goog.io | Unoffical Google Search API',
    version='0.1.0',
    servers=[{'url': 'https://api.goog.io'}],
)


@app.get(
    '/#-datamodel-code-generator-#-root-#-special-#',
    description=""" It "status" == true then API is up, else the API is down """,
    tags=['api_status_operations'],
    security=[
        APIKeyHeader(name="apikey"),
    ],
)
def get_the_status_of_the__a_p_i_service():
    """
    Status
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/crawl/{query}',
    description=""" Perform Google Search

 Parameters
----------
query : the string query to perform search. supports advance queries. Check out https://moz.com/blog/the-ultimate-guide-to-the-google-search-parameters guide for formating

Returns
-------
json: a the html source of the results page """,
    tags=['data_crawling_operations', 'search_operations'],
    security=[
        APIKeyHeader(name="apikey"),
    ],
)
def crawl(query: Union[str, str, str, str]):
    """
    Crawl
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/images/{query}',
    description=""" Perform Google Image Search

Parameters
----------
query : the string query to perform search. supports advance queries.

Returns
-------
json: a list of results with the link, description, and title for each result """,
    tags=['media_query_operations', 'search_operations'],
    security=[
        APIKeyHeader(name="apikey"),
    ],
)
def images(query: str):
    """
    Images
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/news/{query}',
    description=""" Perform Google News Search

 Parameters
----------
query : the string query to perform search for Google news. A simple query for `president` will be `q=president`. An example of multiple keyword would be `q=news+about+presdient+trump`. News can also be filtered by country and language. For `US` news and in English the query will be `q=trump&ceid=US:en` for news in Great Britian the query will be `q=trump&ceid=GB:en`

Returns
-------
json: {"feed": { "title" : "trump" ...} , "entites": [ {"title" : "Trump doubles down on divisive messaging in speech to honor Independence Day - CNN", "links": []} ...]} """,
    tags=['media_query_operations', 'search_operations'],
    security=[
        APIKeyHeader(name="apikey"),
    ],
)
def news(query: str):
    """
    News
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/search/{query}',
    description=""" Perform Google Search

Parameters
----------
query : the string query to perform search. supports advance queries. Check out https://moz.com/blog/the-ultimate-guide-to-the-google-search-parameters guide for formating

Returns
-------
json: a list of results with the link, description, and title for each result """,
    tags=['search_operations', 'data_crawling_operations'],
    security=[
        APIKeyHeader(name="apikey"),
    ],
)
def search(query: Union[str, str, str, str]):
    """
    Search
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/serp/',
    description=""" Perform Google Search and search for website in Search Engine Results Pages (SERP)

Parameters
----------
query : the string query to perform search. supports advance queries. Check out https://moz.com/blog/the-ultimate-guide-to-the-google-search-parameters guide for formatting, it is recommended to set the query `&num=100`

Returns
-------
json: a list of results with the query, website, searched_results, and position. json["position"] will be set to -1 if website is not found in results """,
    tags=['search_operations', 'serp_handling_operations'],
    security=[
        APIKeyHeader(name="apikey"),
    ],
)
def serp(body: SerpData):
    """
    SERP
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
